// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TODOClient is the client API for TODO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TODOClient interface {
	TODO(ctx context.Context, in *EmptyResponse, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type tODOClient struct {
	cc grpc.ClientConnInterface
}

func NewTODOClient(cc grpc.ClientConnInterface) TODOClient {
	return &tODOClient{cc}
}

func (c *tODOClient) TODO(ctx context.Context, in *EmptyResponse, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/TODO.TODO/TODO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TODOServer is the server API for TODO service.
// All implementations must embed UnimplementedTODOServer
// for forward compatibility
type TODOServer interface {
	TODO(context.Context, *EmptyResponse) (*EmptyResponse, error)
	mustEmbedUnimplementedTODOServer()
}

// UnimplementedTODOServer must be embedded to have forward compatible implementations.
type UnimplementedTODOServer struct {
}

func (UnimplementedTODOServer) TODO(context.Context, *EmptyResponse) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TODO not implemented")
}
func (UnimplementedTODOServer) mustEmbedUnimplementedTODOServer() {}

// UnsafeTODOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TODOServer will
// result in compilation errors.
type UnsafeTODOServer interface {
	mustEmbedUnimplementedTODOServer()
}

func RegisterTODOServer(s grpc.ServiceRegistrar, srv TODOServer) {
	s.RegisterService(&TODO_ServiceDesc, srv)
}

func _TODO_TODO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServer).TODO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TODO.TODO/TODO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServer).TODO(ctx, req.(*EmptyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// TODO_ServiceDesc is the grpc.ServiceDesc for TODO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TODO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TODO.TODO",
	HandlerType: (*TODOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TODO",
			Handler:    _TODO_TODO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/TODO.proto",
}
